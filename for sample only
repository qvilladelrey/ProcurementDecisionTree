<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive Decision Tree</title>
    <style>
        body {
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background-image: url('Goods, Infra, Consulting (1).png');
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            background-attachment: fixed;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .decision-container {
            background: white;
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 35px 65px rgba(0.25,0.25,0.25,0.25);
            max-width: 700px;
            width: 100%;
            text-align: center;
            position: relative;
            overflow: hidden;
        }

        h1 {
            font-family: 'Bricolage Grotesque', 'Arial', sans-serif;
            color: #333;
            margin-bottom: 30px;
            font-size: 2.5em;
            font-weight: 600;
        }

        .question {
            font-size: 2em;
            color: #555;
            margin-bottom: 30px;
            line-height: 1.5;
        }

        .options {
            display: flex;
            flex-direction: column;
            gap: 15px;
            margin-bottom: 30px;
            align-items: center;
        }

        .options.horizontal {
            flex-direction: row;
            justify-content: space-between;
            flex-wrap: wrap;
        }

        .option-btn {
            background: linear-gradient(135deg, #1e3888, #3a6ea5);
            color: white;
            border: none;
            padding: 18px 25px;
            border-radius: 12px;
            font-size: 1.1em;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 500;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
            width: 100%;
            max-width: 450px;
            min-height: 80px;
            display: flex;
            align-items: center;
            justify-content: center;
            text-align: center;
            line-height: 1.3;
        }
        .option-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
        }

        .option-btn:active {
            transform: translateY(0);
        }

        .image-option {
            background: white;
            border: 2px solid #e5e7eb;
            border-radius: 16px;
            padding: 20px 15px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
            width: 100%;
            max-width: 280px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.08);
            flex: 1;
            min-width: 140px;
        }

        .image-option:hover {
            border-color: #667eea;
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.15);
        }

        .image-option h3 {
            margin: 12px 0 6px 0;
            color: #333;
            font-size: 1.1em;
            font-weight: 600;
        }

        .image-option p {
            margin: 0;
            color: #666;
            font-size: 0.85em;
            line-height: 1.3;
        }

        .restart-btn {
            background: #28a745;
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 10px;
            font-size: 1em;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 500;
            margin-right: 10px;
        }

        .back-btn {
            background: #6c757d;
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 10px;
            font-size: 1em;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 500;
        }

        .back-btn:hover {
            background: #5a6268;
        }

        .restart-btn:hover {
            background: #218838;
            transform: translateY(-1px);
        }

        .definition-word {
            position: relative;
            cursor: help;
            color: #667eea;
            font-weight: 500;
            border-bottom: 1px dotted #667eea;
        }

        .definition-tooltip {
            position: absolute;
            bottom: 100%;
            left: 50%;
            transform: translateX(-50%);
            background: #333;
            color: white;
            padding: 10px 16px;
            border-radius: 8px;
            font-size: 0.85em;
            white-space: nowrap;
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            margin-bottom: 5px;
            width: 300px;
            white-space: normal;
            text-align: center;
            line-height: 1.2;
            max-height: 80px;
            overflow-y: auto;
            overflow-x: hidden;
        }

        .definition-tooltip::after {
            content: '';
            position: absolute;
            top: 100%;
            left: 50%;
            transform: translateX(-50%);
            border: 5px solid transparent;
            border-top-color: #333;
        }

        .definition-word:hover .definition-tooltip {
            opacity: 1;
            visibility: visible;
        }

        /* New styles for breadcrumb trail */
        .breadcrumb-container {
            background: #f0f4fa;
            border-radius: 10px;
            padding: 18px 16px;
            margin-bottom: 18px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }

        .breadcrumb-title {
            font-weight: bold;
            color: #1e3888;
            font-size: 1.12em;
            margin-bottom: 8px;
        }

        .breadcrumb-trail {
            display: flex;
            flex-wrap: wrap;
            align-items: center;
            gap: 8px;
        }

        .breadcrumb-btn {
            background: none;
            border: none;
            color: #1e3888;
            cursor: pointer;
            text-decoration: underline;
            font-size: 0.9em;
            padding: 4px 8px;
            border-radius: 4px;
            transition: all 0.2s ease;
        }

        .breadcrumb-btn:hover {
            color: #3a6ea5;
            background: rgba(58, 110, 165, 0.1);
        }

        .breadcrumb-current {
            color: #333;
            font-weight: 600;
            padding: 4px 8px;
        }

        /* New styles for hierarchical recommendations */
        .recommendation-container {
            margin-bottom: 20px;
        }

        .primary-recommendation {
            background: linear-gradient(135deg, #1e3888, #3a6ea5);
            color: white;
            padding: 25px;
            border-radius: 15px;
            margin-bottom: 15px;
            box-shadow: 0 8px 25px rgba(0,0,0,0.2);
            text-align: left;
        }

        .recommendation-title {
            font-weight: 700;
            font-size: 1.3em;
            margin-bottom: 10px;
            display: flex;
            align-items: center;
        }

        .recommendation-title .icon {
            margin-right: 10px;
            font-size: 1.5em;
        }

        .recommendation-description {
            font-size: 1em;
            line-height: 1.5;
        }

        .alternative-recommendations {
            display: flex;
            flex-direction: column;
            gap: 10px;
            margin-top: 20px;
        }

        .alternative-title {
            font-weight: 600;
            color: #333;
            margin-bottom: 8px;
            display: flex;
            align-items: center;
            font-size: 1.1em;
        }

        .alternative-title .icon {
            margin-right: 8px;
            font-size: 1.2em;
        }

        .alternative-badges {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
        }

        .alternative-badge {
            background: #f8f9fa;
            color: #333;
            padding: 10px 15px;
            border-radius: 8px;
            font-size: 0.9em;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 5px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }

        /* New styles for dynamic recommendations panel */
        .dynamic-recommendations {
            background: #e8f4fd;
            border-radius: 12px;
            padding: 15px;
            margin-bottom: 20px;
            box-shadow: 0 6px 18px rgba(0,0,0,0.15);
        }

        .dynamic-title {
            font-weight: bold;
            color: #1e3888;
            font-size: 1.1em;
            margin-bottom: 10px;
            display: flex;
            align-items: center;
        }

        .dynamic-title .icon {
            margin-right: 8px;
        }

        .recommendation-badges {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
        }

        .recommendation-badge {
            background: #1e3888;
            color: white;
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 0.85em;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .button-container {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-top: 20px;
        }

        @media (max-width: 768px) {
            .decision-container {
                padding: 25px;
                margin: 10px;
            }
            
            h1 {
                font-size: 1.8em;
            }
            
            .question {
                font-size: 1.1em;
            }
            
            .button-container {
                flex-direction: column;
            }
            
            .restart-btn, .back-btn {
                width: 100%;
                margin: 5px 0;
            }
        }
    </style>
</head>
<body>
    <div class="decision-container">
        <h1>Decision Tree for Modes of Procurement</h1>
        
        <!-- Breadcrumb Trail -->
        <div id="breadcrumbContainer" class="breadcrumb-container" style="display: none;">
            <div class="breadcrumb-title">Your Path:</div>
            <nav id="breadcrumbTrail" class="breadcrumb-trail">
                <!-- Breadcrumb items will be dynamically added here -->
            </nav>
        </div>

        <!-- Dynamic Recommendations Panel -->
        <div id="dynamicRecommendations" class="dynamic-recommendations" style="display: none;">
            <div class="dynamic-title">
                <span class="icon">💡</span>
                <span>Available Procurement Modes:</span>
            </div>
            <div id="recommendationBadges" class="recommendation-badges">
                <!-- Recommendation badges will be dynamically added here -->
            </div>
        </div>
        
        <div id="homeContainer">
            <div class="question" style="font-size: 1.1em; text-align: justified; margin-bottom: 30px;">
                This decision tree for modes of procurement is a step-by-step guide that uses yes/no or conditional questions to determine the most appropriate procurement method based on thresholds, conditions, and justifications. It ensures Procuring Entities choose which mode of procurement is the most fit for their desired purpose, in accordance with the <span class="definition-word">Fit-for-Purpose<span class="definition-tooltip">Fit-for-Purpose refers to an approach to procurement that applies the most suitable mechanism or strategy designed to address the specific needs of the Procuring Entity and each project, while promoting flexibility and responsiveness to different conditions and scenarios, based on factors or situations, such as, but not limited to, the nature and complexity of the project, market condition and readiness, urgency or risks, in order to ensure and achieve value for money.</span></span> Approach under Republic Act No. 12009 or the New Government Procurement Act.
            </div>
            
            <div class="options">
                <img src="START.png" onclick="startDecisionTree()" style="width: 280px; height: 90px; object-fit: cover; border-radius: 15px; cursor: pointer; transition: all 0.3s ease; box-shadow: 0 4px 15px rgba(0,0,0,0.2); display: block; margin: 0 auto;" alt="Start icon" onmouseover="this.style.transform='scale(1.05)'" onmouseout="this.style.transform='scale(1)'" onmousedown="this.style.transform='scale(0.95)'" onmouseup="this.style.transform='scale(1.05)'" onerror="this.src=''; this.alt='Image failed to load'; this.style.display='none';">
            </div>
        </div>

        <div id="questionContainer" style="display: none;">
            <div class="question" id="questionText">
                What are you procuring?
            </div>
            
            <div class="options" id="optionsContainer">
                <div class="image-option" onclick="makeChoice('goods')">
                    <img src="Billy Goods.png" style="width: 290px; height: 260px; object-fit: cover; border-radius: 8px;" alt="Goods icon" onerror="this.src=''; this.alt='Image failed to load'; this.style.display='none';">
                    <h3><span class="definition-word">Goods<span class="definition-tooltip">Goods refer to (i) all items, supplies, and  materials, whether in the nature of equipment, furniture, stationery, materials for construction, or personal property of any kind, needed in the transaction of public businesses or in the pursuit of any government undertaking, project or activity; or (ii) general support services which pertain to all types of services except Consulting Services and Infrastructure Projects, such as the repair and maintenance of equipment and furniture, as well as trucking, hauling, janitorial, security, and related or analogous services. Personnel Services or individual COS or JO engagements do not fall under this definition.</span></span></h3>
                </div>
                <div class="image-option" onclick="makeChoice('infrastructure')">
                    <img src="Billy Infra.png" style="width: 290px; height: 260px; object-fit: cover; border-radius: 8px;" alt="Infrastructure icon" onerror="this.src=''; this.alt='Image failed to load'; this.style.display='none';">
                    <h3>Infrastructure Projects</h3>
                </div>
                <div class="image-option" onclick="makeChoice('consulting')">
                    <img src="Billy Consulting.png" style="width: 290px; height: 260px; object-fit: cover; border-radius: 8px;" alt="Consulting icon" onerror="this.src=''; this.alt='Image failed to load'; this.style.display='none';">
                    <h3>Consulting Services</h3>
                </div>
            </div>
            
            <!-- Back Button -->
            <div class="button-container">
                <button onclick="goBack()" class="back-btn" id="backButton" style="display: none;">
                    ← Go Back
                </button>
            </div>
        </div>
        
        <div id="resultContainer" style="display: none;">
            <div class="recommendation-container" id="recommendationContainer">
                <!-- Primary and alternative recommendations will be inserted here -->
            </div>
            <div class="button-container">
                <button class="restart-btn" onclick="restart()">
                    🔄 Start Over
                </button>
            </div>
        </div>
    </div>

    <script>
        const decisionTree = {
            start: {
                question: "What are you procuring?",
                options: {
                    goods: {
                        text: "📦 Goods",
                        next: "highlyspecialized_goods",
                    },
                    infrastructure: {
                        text: "🏗️ Infrastructure Projects",
                        next: "result_under_construction"
                    },
                    consulting: {
                        text: "🤝 Consulting Services",
                        next: "result_under_construction"
                    }
                }
            },
            highlyspecialized_goods: {
                question: "Is the procurement project highly specialized or complex in nature?",
                options: {
                    yes: {
                        text: "✅ Yes",
                        next: "previously_procured_goods"
                    },
                    no: {
                        text: "❌ No",
                        next: "result_under_construction"
                    }
                }
            },
            previously_procured_goods: {
                question: "Was the Good procured previously?",
                options: {
                    yes: {
                        text: "✅ Yes",
                        next: "need_goods_A"
                    },
                    no: {
                        text: "❌ No",
                        next: "typeofgood_B"
                    }
                }
            },
            need_goods_A: {
                question: "Is there a need to:",
                options: {
                    immediate_action_goods: {
                        text: "🚨 Undertake immediate action to prevent damage to or loss of life or property or restore vital public services",
                        next: "contract_rescinded_goods"
                    },
                    failed_bidding_goods: {
                        text: "🔄 Procure again due to two (2) failures of bidding (Competitive Bidding, Limited Source Bidding, or Competitive Dialogue)",
                        next: "prefer_failedbidding_goods"
                    },
                    replenish_goods: {
                        text: "📋 Replenish Goods procured under a previously awarded contract",
                        next: "competitive_contract_goods"
                    },
                    other_goods_A: {
                        text: "❓ Not among the stated options",
                        next: "typeofgood_B"
                    }
                }
            },
            contract_rescinded_goods: {
                question: "Was the contract of the previous bidder rescinded or terminated?",
                options: {
                    yes: {
                        text: "✅ Yes",
                        next: "prefer_takeover_goods"
                    },
                    no: {
                        text: "❌ No",
                        next: "prefer_emergencycases_goods"
                    }
                }
            },
            prefer_takeover_goods: {
                question: "Do you prefer to:",
                options: {
                    yes_prefer_takeover: {
                        text: "📋 Post-Qualify and negotiate with the second (2nd) lowest Lowest Calculated (LC) or Most Advantageous (MA) bidder and adopt Negotiated Procurement",
                        next: "result_takeover"
                    },
                    different_prefer_takeover: {
                        text: "🔄 Adopt different procurement mode",
                        next: "typeofgood_B"
                    }
                }
            },
            prefer_emergencycases_goods: {
                question: "Do you prefer to:",
                options: {
                    yes_prefer_emergencycases_goods: {
                        text: "📋 Revise Annual Procurement Plan (APP) as necessary and adopt Negotiated Procurement",
                        next: "result_emergency_cases"
                    },
                    different_prefer_emergencycases_goods: {
                        text: "🔄 Adopt different procurement mode",
                        next: "typeofgood_B"
                    }
                }
            },
            prefer_failedbidding_goods: {
                question: "Do you prefer to:",
                options: {
                    yes_prefer_failedbidding_goods: {
                        text: "📋 Review terms, conditions, specifications, and cost estimates, and adjust ABC, if necessary and approved",
                        next: "result_failed_bidding"
                        triggers: ["Failed Bidding Procurement", "Negotiated Procurement"]
                    },
                    different_prefer_failedbidding_goods: {
                        text: "🔄 Adopt different procurement mode",
                        next: "typeofgood_B"
                        triggers: ["Competitive Bidding", "Request for Proposals"]
                    }
                }
            },
            typeofgood_B: {
                question: "Is the Good:",
                options: {
                    necessarytopreventdamage_goods: {
                        text: "🚨 Necessary to prevent damage to or loss of life or property OR restore vital public services, etc.",
                        next: "result_emergency_cases"
                    },
                    limitedsources_plantcomponent_goods: {
                        text: "🏭 Obtainable only from a limited number of sources OR a major plant component",
                        next: "preselectedsupplier_goods"
                    },
                    researchanddevelopment_goods: {
                        text: "🔬 To be used actually, exclusively, and directly in the conduct of research and development projects or activities",
                        next: "typeofsciencegood"
                    },
                    defenseequipment_goods: {
                        text: "🚁 Major defense equipment or materiel deemed necessary to protect the country by the Secretary of the Department of National Defense (DND)",
                        next: "afpmodernizationprogram_goods"
                    },
                    scholarlyartisticwork_goods: {
                        text: "🎓 Scientific, Scholarly or Artistic Work, Exclusive Technology, and/or Media Services",
                        next: "typeofscholarly_goods"
                    },
                    newconcept_goods: {
                        text: "💡 A new concept or technology",
                        next: "unsolicitedoffer_goods"
                    },
                    other_goods_B: {
                        text: "❓ Not among the stated options",
                        next: "typeofsupplier_goods_C"
                    }
                }
            }
        };

        const results = {
            result_emergency_cases: {
                title: "🚨 Negotiated Procurement: Emergency Cases",
                description: "This is a mode of procurement that can be adopted in case of imminent danger to life or property during a state of calamity, or when time is of the essence arising from natural or man-made calamities or other causes where immediate action is necessary to prevent damage to or loss of life or property, or to restore vital public services, infrastructure facilities, and other public utilities."
            },
            result_failed_bidding: {
                title: "🔄 Failed Bidding Procurement",
                description: "After two failed bidding attempts, you may proceed with alternative procurement methods such as negotiated procurement or direct contracting. Review the reasons for previous failures and adjust specifications, terms, or market approach as needed to ensure successful procurement."
            },
            result_takeover: {
                title: "📋 Takeover Procurement",
                description: "When a contract is rescinded or terminated, you may negotiate with the second lowest bidder from the original bidding process. Ensure that the second bidder is still willing and able to perform the contract at their previously quoted price."
            },
            result_under_construction: {
                title: "🚧 Decision Path Under Construction",
                description: "This decision path is still being developed in the decision tree. Please consult your procurement manual or legal department for guidance on the appropriate procurement method for your specific situation."
            }
        };

        // Emoji mapping for procurement modes
        const procurementModeEmojis = {
            "Direct Procurement": "🤝",
            "Competitive Bidding": "🏆",
            "Public-Private Partnership": "🤝",
            "Request for Proposals": "📋",
            "Alternative Procurement": "🌟",
            "Small Value Procurement": "💰",
            "Repeat Order": "📋",
            "Emergency Procurement": "🚨",
            "Negotiated Procurement": "🤝",
            "Takeover Procurement": "📋",
            "Failed Bidding Procurement": "🔄",
            "Limited Source Bidding": "🎯"
        };

        let currentNode = 'start';
        let userPath = [];
        let breadcrumbPath = [];
        let availableModes = new Set();
        let history = [];

        function updateBreadcrumb() {
            const breadcrumbContainer = document.getElementById('breadcrumbContainer');
            const breadcrumbTrail = document.getElementById('breadcrumbTrail');
            
            breadcrumbTrail.innerHTML = '';
            
            // Add home button
            const homeButton = document.createElement('button');
            homeButton.className = 'breadcrumb-btn';
            homeButton.textContent = '🏠 Home';
            homeButton.onclick = () => restart();
            breadcrumbTrail.appendChild(homeButton);
            
            // Add breadcrumb items
            breadcrumbPath.forEach((item, index) => {
                // Separator
                const separator = document.createElement('span');
                separator.textContent = ' / ';
                separator.style.color = '#999';
                breadcrumbTrail.appendChild(separator);
                
                // Breadcrumb item (clickable except current)
                if (index < breadcrumbPath.length - 1) {
                    const breadcrumbBtn = document.createElement('button');
                    breadcrumbBtn.className = 'breadcrumb-btn';
                    breadcrumbBtn.textContent = item;
                    breadcrumbBtn.onclick = () => navigateToStep(index);
                    breadcrumbTrail.appendChild(breadcrumbBtn);
                } else {
                    const breadcrumbItem = document.createElement('span');
                    breadcrumbItem.className = 'breadcrumb-current';
                    breadcrumbItem.textContent = item;
                    breadcrumbTrail.appendChild(breadcrumbItem);
                }
            });
            
            // Show breadcrumb if we have items
            if (breadcrumbPath.length > 0) {
                breadcrumbContainer.style.display = 'block';
            } else {
                breadcrumbContainer.style.display = 'none';
            }
        }

        function updateDynamicRecommendations() {
            const dynamicContainer = document.getElementById('dynamicRecommendations');
            const badgesContainer = document.getElementById('recommendationBadges');
            
            badgesContainer.innerHTML = '';
            
            if (availableModes.size > 0) {
                // Convert Set to Array and create badges
                Array.from(availableModes).forEach(mode => {
                    const badge = document.createElement('div');
                    badge.className = 'recommendation-badge';
                    badge.innerHTML = `${procurementModeEmojis[mode] || '📋'} ${mode}`;
                    badgesContainer.appendChild(badge);
                });
                
                dynamicContainer.style.display = 'block';
            } else {
                dynamicContainer.style.display = 'none';
            }
        }

        function makeChoice(choice) {
            const currentNodeData = decisionTree[currentNode];
            const selectedOption = currentNodeData.options[choice];
            
            // Save current state to history
            history.push({
                node: currentNode,
                path: [...breadcrumbPath],
                modes: new Set(availableModes)
            });
            
            userPath.push(selectedOption.text);
            breadcrumbPath.push(selectedOption.text);
            
            // Add any triggered procurement modes to available modes
            if (selectedOption.triggers) {
                selectedOption.triggers.forEach(mode => {
                    availableModes.add(mode);
                });
            }
            
            currentNode = selectedOption.next;
            
            updateBreadcrumb();
            updateDynamicRecommendations();
            updateBackButton();
            
            if (currentNode.startsWith('result_')) {
                showResult();
            } else {
                showQuestion();
            }
        }

        function goBack() {
            if (history.length === 0) return;
            
            // Get previous state from history
            const previousState = history.pop();
            
            // Restore previous state
            currentNode = previousState.node;
            breadcrumbPath = previousState.path;
            availableModes = previousState.modes;
            
            updateBreadcrumb();
            updateDynamicRecommendations();
            updateBackButton();
            showQuestion();
        }

        function navigateToStep(stepIndex) {
            // Clear history and available modes
            history = history.slice(0, stepIndex);
            availableModes.clear();
            
            // Rebuild available modes up to the selected step
            for (let i = 0; i <= stepIndex; i++) {
                if (history[i] && history[i].modes) {
                    history[i].modes.forEach(mode => availableModes.add(mode));
                }
            }
            
            // Update breadcrumb path
            breadcrumbPath = breadcrumbPath.slice(0, stepIndex + 1);
            
            // Find the node for this step
            let tempNode = 'start';
            for (let i = 0; i <= stepIndex; i++) {
                const step = breadcrumbPath[i];
                const nodeData = decisionTree[tempNode];
                for (let optionKey in nodeData.options) {
                    if (nodeData.options[optionKey].text === step) {
                        tempNode = nodeData.options[optionKey].next;
                        break;
                    }
                }
            }
            
            currentNode = tempNode;
            
            updateBreadcrumb();
            updateDynamicRecommendations();
            updateBackButton();
            showQuestion();
        }

        function updateBackButton() {
            const backButton = document.getElementById('backButton');
            if (history.length > 0) {
                backButton.style.display = 'block';
            } else {
                backButton.style.display = 'none';
            }
        }

        function showQuestion() {
            document.getElementById('homeContainer').style.display = 'none';
            document.getElementById('questionContainer').style.display = 'block';
            document.getElementById('resultContainer').style.display = 'none';
            document.getElementById('dynamicRecommendations').style.display = 'block';
            
            const nodeData = decisionTree[currentNode];
            document.getElementById('questionText').textContent = nodeData.question;
            
            const optionsContainer = document.getElementById('optionsContainer');
            
            // Only replace with image options for the first question
            if (currentNode === 'start') {
                optionsContainer.innerHTML = `
                    <div class="image-option" onclick="makeChoice('goods')">
                        <img src="Billy Goods.png" style="width: 290px; height: 260px; object-fit: cover; border-radius: 8px;" alt="Goods icon" onerror="this.src=''; this.alt='Image failed to load'; this.style.display='none';">
                        <h3>Goods</h3>
                    </div>
                    <div class="image-option" onclick="makeChoice('infrastructure')">
                        <img src="Billy Infra.png" style="width: 290px; height: 260px; object-fit: cover; border-radius: 8px;" alt="Infrastructure icon" onerror="this.src=''; this.alt='Image failed to load'; this.style.display='none';">
                        <h3>Infrastructure Projects</h3>
                    </div>
                    <div class="image-option" onclick="makeChoice('consulting')">
                        <img src="Billy Consulting.png" style="width: 290px; height: 260px; object-fit: cover; border-radius: 8px;" alt="Consulting icon" onerror="this.src=''; this.alt='Image failed to load'; this.style.display='none';">
                        <h3>Consulting Services</h3>
                    </div>
                `;
            } else {
                // Use image options for yes/no questions
                if (currentNode === 'highlyspecialized_goods' || 
                    currentNode === 'previously_procured_goods' || 
                    currentNode === 'contract_rescinded_goods') {
                    optionsContainer.className = 'options horizontal';
                    optionsContainer.innerHTML = `
                        <div class="image-option" onclick="makeChoice('yes')">
                            <img src="YES.png" style="width: 130px; height: 70px; object-fit: cover; border-radius: 1px;" alt="Yes icon" onerror="this.src=''; this.alt='Image failed to load'; this.style.display='none';">
                        </div>
                        <div class="image-option" onclick="makeChoice('no')">
                            <img src="NO.png" style="width: 130px; height: 70px; object-fit: cover; border-radius: 1px;" alt="No icon" onerror="this.src=''; this.alt='Image failed to load'; this.style.display='none';">
                        </div>
                    `;
                } else {
                    // Use regular buttons for other questions
                    optionsContainer.className = 'options';
                    optionsContainer.innerHTML = '';
                    
                    for (let optionKey in nodeData.options) {
                        const option = nodeData.options[optionKey];
                        const button = document.createElement('button');
                        button.className = 'option-btn';
                        button.textContent = option.text;
                        button.onclick = () => makeChoice(optionKey);
                        optionsContainer.appendChild(button);
                    }
                }
            }
        }

        function showResult() {
            const result = results[currentNode];
            
            document.getElementById('homeContainer').style.display = 'none';
            document.getElementById('questionContainer').style.display = 'none';
            document.getElementById('resultContainer').style.display = 'block';
            
            const recommendationContainer = document.getElementById('recommendationContainer');
            recommendationContainer.innerHTML = '';
            
            // Create primary recommendation
            const primaryRecommendation = document.createElement('div');
            primaryRecommendation.className = 'primary-recommendation';
            primaryRecommendation.innerHTML = `
                <div class="recommendation-title">
                    <span class="icon">🏆</span>
                    <span>Primary Recommendation</span>
                </div>
                <div class="recommendation-description">
                    <strong>${result.title}</strong><br><br>
                    ${result.description}
                </div>
            `;
            recommendationContainer.appendChild(primaryRecommendation);
            
            // Create alternative recommendations from triggered modes
            if (availableModes.size > 0) {
                const alternativeContainer = document.createElement('div');
                alternativeContainer.className = 'alternative-recommendations';
                
                const alternativeTitle = document.createElement('div');
                alternativeTitle.className = 'alternative-title';
                alternativeTitle.innerHTML = '<span class="icon">💡</span> Alternative Procurement Modes:';
                alternativeContainer.appendChild(alternativeTitle);
                
                const alternativeBadges = document.createElement('div');
                alternativeBadges.className = 'alternative-badges';
                
                // Convert Set to Array and create badges
                Array.from(availableModes).forEach(mode => {
                    const badge = document.createElement('div');
                    badge.className = 'alternative-badge';
                    badge.innerHTML = `${procurementModeEmojis[mode] || '📋'} ${mode}`;
                    alternativeBadges.appendChild(badge);
                });
                
                alternativeContainer.appendChild(alternativeBadges);
                recommendationContainer.appendChild(alternativeContainer);
            }
            
            // Hide dynamic recommendations in final result
            document.getElementById('dynamicRecommendations').style.display = 'none';
        }

        function startDecisionTree() {
            document.getElementById('homeContainer').style.display = 'none';
            document.getElementById('questionContainer').style.display = 'block';
            document.getElementById('dynamicRecommendations').style.display = 'block';
            showQuestion();
        }

        function restart() {
            // Reset all variables completely
            currentNode = 'start';
            userPath = [];
            breadcrumbPath = [];
            availableModes.clear();
            history = [];
            
            // Reset all UI elements
            document.getElementById('homeContainer').style.display = 'block';
            document.getElementById('questionContainer').style.display = 'none';
            document.getElementById('resultContainer').style.display = 'none';
            document.getElementById('breadcrumbContainer').style.display = 'none';
            document.getElementById('dynamicRecommendations').style.display = 'none';
            document.getElementById('backButton').style.display = 'none';
            
            // Clear any dynamic content
            document.getElementById('recommendationBadges').innerHTML = '';
            document.getElementById('recommendationContainer').innerHTML = '';
        }

        // Initialize
        showQuestion();
    </script>
</body>
</html>
