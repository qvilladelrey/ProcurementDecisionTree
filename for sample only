<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Procurement Decision Tree</title>
    <style>
        body {
            font-family: 'Segoe UI', Arial, sans-serif;
            background: #f4f8fb;
            margin: 0;
            padding: 0;
            min-height: 100vh;
            box-sizing: border-box;
        }
        .container {
            background: #fff;
            border-radius: 18px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.12);
            padding: 36px 28px;
            max-width: 480px;
            width: 100%;
            margin: 24px auto;
        }
        h1 {
            font-size: 1.6em;
            margin-bottom: 18px;
            color: #1e3888;
            font-weight: 700;
            text-align: center;
        }
        h2 {
            font-size: 1.15em;
            margin-bottom: 22px;
            color: #333;
            text-align: center;
        }
        .options {
            display: flex;
            flex-direction: column;
            gap: 14px;
            margin-bottom: 18px;
        }
        .option-btn {
            background: linear-gradient(90deg, #1e3888, #3a6ea5);
            color: #fff;
            border: none;
            border-radius: 10px;
            padding: 14px 0;
            font-size: 1em;
            cursor: pointer;
            transition: background 0.2s;
            font-weight: 500;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 8px;
        }
        .option-btn:hover {
            background: linear-gradient(90deg, #3a6ea5, #1e3888);
        }
        .breadcrumb-container {
            background: #f0f4fa;
            border-radius: 10px;
            padding: 18px 16px;
            margin-bottom: 18px;
            border-left: 5px solid #1e3888;
        }
        .breadcrumb-title {
            font-weight: bold;
            color: #1e3888;
            font-size: 1.12em;
            margin-bottom: 8px;
        }
        .breadcrumb-trail {
            display: flex;
            flex-wrap: wrap;
            align-items: center;
            gap: 8px;
        }
        .breadcrumb-btn {
            background: none;
            border: none;
            color: #1e3888;
            cursor: pointer;
            text-decoration: underline;
            font-size: 0.9em;
        }
        .breadcrumb-btn:hover {
            color: #3a6ea5;
        }
        .breadcrumb-current {
            color: #333;
            font-weight: 600;
        }
        .recommendation {
            background: #f0f4fa;
            border-radius: 10px;
            padding: 18px 16px;
            margin-bottom: 18px;
            border-left: 5px solid #1e3888;
        }
        .recommendation-title {
            font-weight: bold;
            color: #1e3888;
            font-size: 1.12em;
            margin-bottom: 8px;
        }
        .recommendation-badges {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
        }
        .recommendation-badge {
            background: #1e3888;
            color: white;
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 0.85em;
            font-weight: 500;
        }
        .primary-recommendation {
            background: #e8f4fd;
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 16px;
            border: 2px solid #1e3888;
            text-align: center;
        }
        .primary-title {
            font-weight: bold;
            color: #1e3888;
            font-size: 1.2em;
            margin-bottom: 8px;
        }
        .primary-mode {
            font-size: 1.1em;
            font-weight: 600;
            color: #333;
            margin-bottom: 6px;
        }
        .primary-description {
            color: #666;
            font-size: 0.9em;
        }
        .secondary-section {
            margin-bottom: 16px;
        }
        .secondary-title {
            font-weight: bold;
            color: #1e3888;
            font-size: 1em;
            margin-bottom: 12px;
        }
        .secondary-grid {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }
        .secondary-item {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 12px;
            border-left: 3px solid #3a6ea5;
        }
        .secondary-name {
            font-weight: 600;
            color: #333;
            font-size: 0.95em;
            margin-bottom: 4px;
        }
        .secondary-desc {
            color: #666;
            font-size: 0.8em;
        }
        .restart-btn {
            background: #28a745;
            color: #fff;
            border: none;
            border-radius: 8px;
            padding: 10px 22px;
            font-size: 1em;
            cursor: pointer;
            font-weight: 500;
            margin-top: 10px;
            width: 100%;
        }
        .restart-btn:hover {
            background: #218838;
        }
        .back-btn {
            background: #6c757d;
            color: #fff;
            border: none;
            border-radius: 8px;
            padding: 8px 16px;
            font-size: 0.9em;
            cursor: pointer;
            font-weight: 500;
            margin-top: 16px;
            width: 100%;
        }
        .back-btn:hover {
            background: #5a6268;
        }
        .final-results {
            text-align: center;
        }
        .final-icon {
            font-size: 3em;
            margin-bottom: 16px;
        }
        .final-title {
            font-size: 1.4em;
            font-weight: 700;
            color: #1e3888;
            margin-bottom: 12px;
        }
        .final-subtitle {
            color: #666;
            margin-bottom: 20px;
            font-size: 0.95em;
        }
        .question-block {
            display: none;
        }
        .question-block:not(.hidden) {
            display: block;
        }
        .hidden {
            display: none !important;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Procurement Decision Tree</h1>
        
        <!-- Breadcrumb Trail -->
        <div id="decisionPath" class="breadcrumb-container">
            <div class="breadcrumb-title">Your Path:</div>
            <nav id="breadcrumbTrail" class="breadcrumb-trail">
                <button onclick="goToStep('question1')" class="breadcrumb-btn">
                    üè† Home
                </button>
            </nav>
        </div>

        <!-- Recommendations Panel -->
        <div id="recommendationsPanel" class="recommendation hidden">
            <div class="recommendation-title">üìã Recommended Procurement Modes:</div>
            <div id="recommendationsList" class="recommendation-badges">
                <!-- Recommendations will be added here dynamically -->
            </div>
        </div>

        <!-- Question Container -->
        <div id="questionContainer">
            <!-- Initial Question -->
            <div id="question1" class="question-block">
                <h2>What type of procurement is this?</h2>
                <div class="options">
                    <button onclick="selectOption('goods', 'üì¶ Goods')" class="option-btn">
                        <div style="font-size: 2em;">üì¶</div>
                        <div>Goods</div>
                    </button>
                    <button onclick="selectOption('services', 'üîß Services')" class="option-btn">
                        <div style="font-size: 2em;">üîß</div>
                        <div>Services</div>
                    </button>
                    <button onclick="selectOption('infrastructure', 'üèóÔ∏è Infrastructure')" class="option-btn">
                        <div style="font-size: 2em;">üèóÔ∏è</div>
                        <div>Infrastructure</div>
                    </button>
                </div>
            </div>

            <!-- Goods Questions -->
            <div id="goodsQuestion" class="question-block hidden">
                <h2>Was the Good procured previously?</h2>
                <div class="options">
                    <button onclick="selectOption('goodsPrevYes', 'Previously Procured: Yes')" class="option-btn">
                        <div style="font-size: 2em;">‚úÖ</div>
                        <div>YES</div>
                    </button>
                    <button onclick="selectOption('goodsPrevNo', 'Previously Procured: No')" class="option-btn">
                        <div style="font-size: 2em;">‚ùå</div>
                        <div>NO</div>
                    </button>
                </div>
            </div>

            <!-- Additional Questions for Recommendations -->
            <div id="techSpecsQuestion" class="question-block hidden">
                <h2>Do you have technical specifications that cannot be sufficiently established?</h2>
                <div class="options">
                    <button onclick="selectOption('techSpecsYes', '‚ùì Unclear Tech Specs: Yes')" class="option-btn">
                        <div style="font-size: 2em;">‚ùì</div>
                        <div>YES</div>
                    </button>
                    <button onclick="selectOption('techSpecsNo', '‚úÖ Clear Tech Specs: No')" class="option-btn">
                        <div style="font-size: 2em;">‚úÖ</div>
                        <div>NO</div>
                    </button>
                </div>
            </div>

            <div id="benefitsQuestion" class="question-block hidden">
                <h2>Will this provide significant benefits in efficiency, cost, or outcome?</h2>
                <div class="options">
                    <button onclick="selectOption('benefitsYes', 'üìà Significant Benefits: Yes')" class="option-btn">
                        <div style="font-size: 2em;">üìà</div>
                        <div>YES</div>
                    </button>
                    <button onclick="selectOption('benefitsNo', '‚ûñ Standard Benefits: No')" class="option-btn">
                        <div style="font-size: 2em;">‚ûñ</div>
                        <div>NO</div>
                    </button>
                </div>
            </div>

            <div id="sustainabilityQuestion" class="question-block hidden">
                <h2>Does this incorporate emerging technology and sustainable solutions?</h2>
                <div class="options">
                    <button onclick="selectOption('sustainabilityYes', 'üå± Sustainable Tech: Yes')" class="option-btn">
                        <div style="font-size: 2em;">üå±</div>
                        <div>YES</div>
                    </button>
                    <button onclick="selectOption('sustainabilityNo', 'üîß Standard Tech: No')" class="option-btn">
                        <div style="font-size: 2em;">üîß</div>
                        <div>NO</div>
                    </button>
                </div>
            </div>

            <div id="innovativeQuestion" class="question-block hidden">
                <h2>Does this include innovative design or complex solutions?</h2>
                <div class="options">
                    <button onclick="selectOption('innovativeYes', 'üß© Innovative Design: Yes')" class="option-btn">
                        <div style="font-size: 2em;">üß©</div>
                        <div>YES</div>
                    </button>
                    <button onclick="selectOption('innovativeNo', 'üìã Standard Design: No')" class="option-btn">
                        <div style="font-size: 2em;">üìã</div>
                        <div>NO</div>
                    </button>
                </div>
            </div>

            <!-- Goods Previously No Options -->
            <div id="goodsPrevNoOptions" class="question-block hidden">
                <h2>Select the type of goods:</h2>
                <div class="options">
                    <button onclick="selectOption('rdEquipment', 'üî¨ R&D Equipment')" class="option-btn">
                        <div style="font-size: 1.5em;">üî¨</div>
                        <div>R&D Equipment</div>
                    </button>
                    <button onclick="selectOption('defenseEquipment', 'üõ°Ô∏è Defense Equipment')" class="option-btn">
                        <div style="font-size: 1.5em;">üõ°Ô∏è</div>
                        <div>Defense Equipment</div>
                    </button>
                    <button onclick="selectOption('newTechnology', 'üí° New Technology')" class="option-btn">
                        <div style="font-size: 1.5em;">üí°</div>
                        <div>New Technology</div>
                    </button>
                    <button onclick="selectOption('medicalEquipment', 'üè• Medical Equipment')" class="option-btn">
                        <div style="font-size: 1.5em;">üè•</div>
                        <div>Medical Equipment</div>
                    </button>
                </div>
            </div>

            <!-- Services Questions -->
            <div id="servicesQuestion" class="question-block hidden">
                <h2>Select the type of service:</h2>
                <div class="options">
                    <button onclick="selectOption('rdServices', 'üî¨ R&D Services')" class="option-btn">
                        <div style="font-size: 1.5em;">üî¨</div>
                        <div>R&D Services</div>
                    </button>
                    <button onclick="selectOption('artisticWork', 'üé® Artistic Work')" class="option-btn">
                        <div style="font-size: 1.5em;">üé®</div>
                        <div>Artistic Work</div>
                    </button>
                </div>
            </div>

            <!-- Final Results -->
            <div id="finalResults" class="question-block hidden">
                <div class="final-results">
                    <div class="final-icon">üéØ</div>
                    <div class="final-title">Procurement Analysis Complete</div>
                    <div class="final-subtitle">Based on your answers, we've identified the best procurement approaches for your needs.</div>
                    <div id="finalRecommendations">
                        <!-- Final recommendations will be displayed here -->
                    </div>
                    <button onclick="resetTree()" class="restart-btn">
                        Start Over
                    </button>
                </div>
            </div>

            <!-- Back Button -->
            <div id="backButton" class="hidden">
                <button onclick="goBack()" class="back-btn">
                    ‚Üê Go Back
                </button>
            </div>
        </div>
    </div>

    <script>
        let decisionPath = [];
        let currentStep = 'question1';
        let history = [];
        let recommendations = new Set(); // Track recommended procurement modes
        let answers = {}; // Track all answers for recommendation logic

        // Define procurement modes and their triggers
        const procurementModes = {
            'Direct Negotiation': {
                emoji: 'ü§ù',
                color: 'bg-green-100 text-green-800 border-green-300',
                triggers: ['goodsPrevYes', 'rdEquipment', 'defenseEquipment', 'artisticWork'],
                description: 'Best for specialized or previously procured items'
            },
            'Competitive Bidding': {
                emoji: 'üèÜ',
                color: 'bg-blue-100 text-blue-800 border-blue-300',
                triggers: ['techSpecsNo', 'benefitsNo'],
                description: 'Standard approach for well-defined requirements'
            },
            'Request for Proposals (RFP)': {
                emoji: 'üìã',
                color: 'bg-purple-100 text-purple-800 border-purple-300',
                triggers: ['techSpecsYes', 'innovativeYes'],
                description: 'Ideal for complex or unclear specifications'
            },
            'Alternative Procurement': {
                emoji: 'üåü',
                color: 'bg-yellow-100 text-yellow-800 border-yellow-300',
                triggers: ['benefitsYes', 'sustainabilityYes'],
                description: 'For innovative solutions with significant benefits'
            },
            'Emergency Procurement': {
                emoji: 'üö®',
                color: 'bg-red-100 text-red-800 border-red-300',
                triggers: ['medicalEquipment'],
                description: 'Fast-track for urgent medical needs'
            },
            'Framework Agreement': {
                emoji: 'üìÑ',
                color: 'bg-indigo-100 text-indigo-800 border-indigo-300',
                triggers: [],
                description: 'Long-term agreements for recurring needs'
            },
            'Public-Private Partnership': {
                emoji: 'ü§ù',
                color: 'bg-teal-100 text-teal-800 border-teal-300',
                triggers: [],
                description: 'Collaborative approach for large projects'
            }
        };

        // Define primary recommendations based on final answer
        const primaryRecommendations = {
            'rdEquipment': 'Request for Proposals (RFP)',
            'defenseEquipment': 'Direct Negotiation',
            'newTechnology': 'Alternative Procurement',
            'medicalEquipment': 'Emergency Procurement',
            'rdServices': 'Request for Proposals (RFP)',
            'artisticWork': 'Direct Negotiation'
        };

        // Define secondary recommendations for each primary
        const secondaryRecommendations = {
            'Request for Proposals (RFP)': ['Competitive Bidding', 'Framework Agreement'],
            'Direct Negotiation': ['Alternative Procurement', 'Framework Agreement'],
            'Alternative Procurement': ['Request for Proposals (RFP)', 'Public-Private Partnership'],
            'Emergency Procurement': ['Direct Negotiation', 'Framework Agreement'],
            'Competitive Bidding': ['Request for Proposals (RFP)', 'Framework Agreement']
        };

        function getPrimaryRecommendation(lastAnswer) {
            return primaryRecommendations[lastAnswer] || null;
        }

        function getSecondaryRecommendations(lastAnswer) {
            const primary = getPrimaryRecommendation(lastAnswer);
            return primary ? (secondaryRecommendations[primary] || []) : [];
        }

        function updateRecommendations(selectedOption) {
            // Add answer to tracking
            answers[selectedOption] = true;
            
            // Check each procurement mode for triggers
            Object.entries(procurementModes).forEach(([mode, config]) => {
                config.triggers.forEach(trigger => {
                    if (selectedOption === trigger) {
                        recommendations.add(mode);
                    }
                });
            });
            
            // Update recommendations display
            displayRecommendations();
        }

        function displayRecommendations() {
            const panel = document.getElementById('recommendationsPanel');
            const list = document.getElementById('recommendationsList');
            
            if (recommendations.size > 0) {
                panel.classList.remove('hidden');
                list.innerHTML = '';
                
                recommendations.forEach(mode => {
                    const config = procurementModes[mode];
                    const badge = document.createElement('div');
                    badge.className = 'recommendation-badge';
                    badge.textContent = `${config.emoji} ${mode}`;
                    list.appendChild(badge);
                });
            } else {
                panel.classList.add('hidden');
            }
        }

        function showFinalResults() {
            const finalRecommendationsDiv = document.getElementById('finalRecommendations');
            finalRecommendationsDiv.innerHTML = '';
            
            // Get the last decision to determine primary recommendation
            const lastDecision = decisionPath[decisionPath.length - 1];
            const primaryRecommendation = getPrimaryRecommendation(lastDecision?.step);
            const secondaryRecommendationsList = getSecondaryRecommendations(lastDecision?.step);
            
            if (primaryRecommendation) {
                // Primary Recommendation Section
                const primarySection = document.createElement('div');
                primarySection.className = 'primary-recommendation';
                
                const primaryTitle = document.createElement('div');
                primaryTitle.className = 'primary-title';
                primaryTitle.textContent = 'üéØ Primary Recommendation';
                primarySection.appendChild(primaryTitle);
                
                const config = procurementModes[primaryRecommendation];
                const primaryMode = document.createElement('div');
                primaryMode.className = 'primary-mode';
                primaryMode.textContent = `${config.emoji} ${primaryRecommendation}`;
                primarySection.appendChild(primaryMode);
                
                const primaryDesc = document.createElement('div');
                primaryDesc.className = 'primary-description';
                primaryDesc.textContent = config.description || 'Best match for your requirements';
                primarySection.appendChild(primaryDesc);
                
                finalRecommendationsDiv.appendChild(primarySection);
                
                // Secondary Recommendations Section
                if (secondaryRecommendationsList.length > 0) {
                    const secondarySection = document.createElement('div');
                    secondarySection.className = 'secondary-section';
                    
                    const secondaryTitle = document.createElement('div');
                    secondaryTitle.className = 'secondary-title';
                    secondaryTitle.textContent = 'üìã Alternative Options:';
                    secondarySection.appendChild(secondaryTitle);
                    
                    const secondaryGrid = document.createElement('div');
                    secondaryGrid.className = 'secondary-grid';
                    
                    secondaryRecommendationsList.forEach(mode => {
                        const config = procurementModes[mode];
                        const item = document.createElement('div');
                        item.className = 'secondary-item';
                        
                        const name = document.createElement('div');
                        name.className = 'secondary-name';
                        name.textContent = `${config.emoji} ${mode}`;
                        item.appendChild(name);
                        
                        const desc = document.createElement('div');
                        desc.className = 'secondary-desc';
                        desc.textContent = config.description || 'Alternative approach';
                        item.appendChild(desc);
                        
                        secondaryGrid.appendChild(item);
                    });
                    
                    secondarySection.appendChild(secondaryGrid);
                    finalRecommendationsDiv.appendChild(secondarySection);
                }
            } else if (recommendations.size > 0) {
                // Fallback to original display if no primary recommendation
                const title = document.createElement('div');
                title.className = 'recommendation-title';
                title.textContent = 'Recommended Procurement Modes:';
                finalRecommendationsDiv.appendChild(title);
                
                const grid = document.createElement('div');
                grid.className = 'secondary-grid';
                
                recommendations.forEach(mode => {
                    const config = procurementModes[mode];
                    const item = document.createElement('div');
                    item.className = 'secondary-item';
                    
                    const name = document.createElement('div');
                    name.className = 'secondary-name';
                    name.textContent = `${config.emoji} ${mode}`;
                    item.appendChild(name);
                    
                    grid.appendChild(item);
                });
                
                finalRecommendationsDiv.appendChild(grid);
            } else {
                const noRec = document.createElement('div');
                noRec.style.color = '#666';
                noRec.textContent = 'No specific recommendations available. Please consult procurement guidelines.';
                finalRecommendationsDiv.appendChild(noRec);
            }
        }

        function updateBreadcrumbTrail() {
            const breadcrumbContainer = document.getElementById('breadcrumbTrail');
            breadcrumbContainer.innerHTML = '';
            
            // Home button
            const homeButton = document.createElement('button');
            homeButton.onclick = () => goToStep('question1');
            homeButton.className = 'breadcrumb-btn';
            homeButton.textContent = 'üè† Home';
            breadcrumbContainer.appendChild(homeButton);
            
            // Add breadcrumb items
            decisionPath.forEach((step, index) => {
                // Separator
                const separator = document.createElement('span');
                separator.textContent = ' / ';
                separator.style.color = '#999';
                breadcrumbContainer.appendChild(separator);
                
                // Breadcrumb item
                const breadcrumbItem = document.createElement('button');
                breadcrumbItem.onclick = () => goToStepFromBreadcrumb(index);
                breadcrumbItem.className = index === decisionPath.length - 1 
                    ? 'breadcrumb-current' 
                    : 'breadcrumb-btn';
                breadcrumbItem.textContent = step.label;
                breadcrumbContainer.appendChild(breadcrumbItem);
            });
            
            // Current step indicator if we're not at the end
            if (currentStep !== 'finalResults' && decisionPath.length > 0) {
                const separator = document.createElement('span');
                separator.textContent = ' / ';
                separator.style.color = '#999';
                breadcrumbContainer.appendChild(separator);
                
                const currentIndicator = document.createElement('span');
                currentIndicator.style.color = '#f39c12';
                currentIndicator.style.fontWeight = '500';
                currentIndicator.textContent = 'üìç Choosing...';
                breadcrumbContainer.appendChild(currentIndicator);
            }
        }

        function getNextStep(selectedOption) {
            const stepFlow = {
                'goods': 'goodsQuestion',
                'services': 'servicesQuestion',
                'infrastructure': 'techSpecsQuestion',
                'goodsPrevYes': 'finalResults',
                'goodsPrevNo': 'techSpecsQuestion',
                'techSpecsYes': 'benefitsQuestion',
                'techSpecsNo': 'benefitsQuestion',
                'benefitsYes': 'sustainabilityQuestion',
                'benefitsNo': 'sustainabilityQuestion',
                'sustainabilityYes': 'innovativeQuestion',
                'sustainabilityNo': 'innovativeQuestion',
                'innovativeYes': 'goodsPrevNoOptions',
                'innovativeNo': 'goodsPrevNoOptions',
                'rdEquipment': 'finalResults',
                'defenseEquipment': 'finalResults',
                'newTechnology': 'finalResults',
                'medicalEquipment': 'finalResults',
                'rdServices': 'finalResults',
                'artisticWork': 'finalResults'
            };
            
            return stepFlow[selectedOption] || 'finalResults';
        }

        function selectOption(nextStepKey, label) {
            // Update recommendations based on selection
            updateRecommendations(nextStepKey);
            
            // Add to decision path
            decisionPath.push({
                step: nextStepKey,
                label: label,
                from: currentStep
            });
            
            // Add to history for back navigation
            history.push({
                step: currentStep,
                path: [...decisionPath],
                recommendations: new Set(recommendations),
                answers: {...answers}
            });
            
            // Hide current question
            document.getElementById(currentStep).classList.add('hidden');
            
            // Get next step
            currentStep = getNextStep(nextStepKey);
            
            // Show next question
            document.getElementById(currentStep).classList.remove('hidden');
            
            // If we're at final results, show final recommendations
            if (currentStep === 'finalResults') {
                showFinalResults();
            }
            
            // Update breadcrumb trail
            updateBreadcrumbTrail();
            
            // Show back button if not at start
            if (history.length > 0) {
                document.getElementById('backButton').classList.remove('hidden');
            }
        }

        function goToStep(targetStep) {
            // Hide current question
            document.getElementById(currentStep).classList.add('hidden');
            
            // Reset to beginning
            decisionPath = [];
            history = [];
            recommendations.clear();
            answers = {};
            currentStep = targetStep;
            
            // Show target question
            document.getElementById(currentStep).classList.remove('hidden');
            
            // Update displays
            updateBreadcrumbTrail();
            displayRecommendations();
            
            // Hide back button
            document.getElementById('backButton').classList.add('hidden');
        }

        function goToStepFromBreadcrumb(pathIndex) {
            // Trim path to selected point
            decisionPath = decisionPath.slice(0, pathIndex + 1);
            
            // Rebuild history up to this point
            history = [];
            let tempStep = 'question1';
            
            decisionPath.forEach((step, index) => {
                history.push({
                    step: tempStep,
                    path: decisionPath.slice(0, index + 1)
                });
                
                // Determine next step
                tempStep = getNextStep(step.step);
            });
            
            // Hide current question
            document.getElementById(currentStep).classList.add('hidden');
            
            // Show appropriate next question
            const lastStep = decisionPath[decisionPath.length - 1];
            currentStep = getNextStep(lastStep.step);
            
            document.getElementById(currentStep).classList.remove('hidden');
            
            // Update breadcrumb
            updateBreadcrumbTrail();
            
            // Show/hide back button
            if (history.length > 0) {
                document.getElementById('backButton').classList.remove('hidden');
            } else {
                document.getElementById('backButton').classList.add('hidden');
            }
        }

        function goBack() {
            if (history.length === 0) return;
            
            // Get previous state
            const previousState = history.pop();
            decisionPath = previousState.path.slice(0, -1);
            recommendations = new Set(previousState.recommendations);
            answers = {...previousState.answers};
            
            // Remove the last answer
            const lastDecision = previousState.path[previousState.path.length - 1];
            if (lastDecision) {
                delete answers[lastDecision.step];
                // Recalculate recommendations
                recommendations.clear();
                Object.keys(answers).forEach(answer => {
                    updateRecommendations(answer);
                });
            }
            
            // Hide current question
            document.getElementById(currentStep).classList.add('hidden');
            
            // Show previous question
            currentStep = previousState.step;
            document.getElementById(currentStep).classList.remove('hidden');
            
            // Update displays
            updateBreadcrumbTrail();
            displayRecommendations();
            
            // Hide back button if at start
            if (history.length === 0) {
                document.getElementById('backButton').classList.add('hidden');
            }
        }

        function resetTree() {
            // Reset all state
            decisionPath = [];
            history = [];
            recommendations.clear();
            answers = {};
            currentStep = 'question1';
            
            // Hide all questions
            document.querySelectorAll('.question-block').forEach(block => {
                block.classList.add('hidden');
            });
            
            // Show first question
            document.getElementById('question1').classList.remove('hidden');
            
            // Hide back button
            document.getElementById('backButton').classList.add('hidden');
            
            // Reset displays
            updateBreadcrumbTrail();
            displayRecommendations();
        }

        // Initialize displays
        updateBreadcrumbTrail();
        displayRecommendations();
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'991f09c365cf46a3',t:'MTc2MTAzMTcwNi4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
