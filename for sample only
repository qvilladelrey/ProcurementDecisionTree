<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Interactive Hierarchical Recommendation Tree</title>
<style>
body {
  box-sizing: border-box;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  margin: 0;
  padding: 20px;
  background: linear-gradient(120deg, #e0e7ff 0%, #f8fafc 100%);
  min-height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
}
.decision-container {
  background: white;
  border-radius: 20px;
  padding: 32px 28px;
  box-shadow: 0 35px 65px rgba(0.25,0.25,0.25,0.18);
  max-width: 600px;
  width: 100%;
  text-align: center;
  position: relative;
  overflow: hidden;
}
h1 {
  font-family: 'Bricolage Grotesque', 'Arial', sans-serif;
  color: #333;
  margin-bottom: 30px;
  font-size: 2.2em;
  font-weight: 600;
}
.question {
  font-size: 1.5em;
  color: #555;
  margin-bottom: 30px;
  line-height: 1.5;
}
.options {
  display: flex;
  flex-direction: column;
  gap: 15px;
  margin-bottom: 30px;
  align-items: center;
}
.options.horizontal {
  flex-direction: row;
  justify-content: space-between;
  flex-wrap: wrap;
}
.option-btn {
  background: linear-gradient(135deg, #1e3888, #3a6ea5);
  color: white;
  border: none;
  padding: 18px 25px;
  border-radius: 12px;
  font-size: 1.1em;
  cursor: pointer;
  transition: all 0.3s ease;
  font-weight: 500;
  box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
  width: 100%;
  max-width: 450px;
  min-height: 60px;
  display: flex;
  align-items: center;
  justify-content: center;
  text-align: center;
  line-height: 1.3;
}
.option-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
}
.result {
  background: linear-gradient(135deg, #1e3888, #3a6ea5);
  color: white;
  padding: 25px;
  border-radius: 15px;
  font-size: 1.2em;
  margin-bottom: 20px;
  box-shadow: 0 8px 20px rgba(79, 172, 254, 0.3);
}
.secondary {
  background: #f8fafc;
  color: #222;
  border-radius: 12px;
  padding: 18px 16px;
  margin: 10px 0 0 0;
  font-size: 1em;
  box-shadow: 0 4px 12px rgba(102, 126, 234, 0.08);
  text-align: left;
}
.path-display {
  background: #f8f9fa;
  padding: 20px;
  border-radius: 12px;
  margin-bottom: 20px;
  box-shadow: 0 8px 20px rgba(79, 172, 254, 0.13);
}
.path-title {
  font-weight: 600;
  color: #333;
  margin-bottom: 10px;
}
.path-steps {
  color: #666;
  font-size: 0.95em;
  line-height: 1.6;
}
.restart-btn {
  background: #28a745;
  color: white;
  border: none;
  padding: 15px 30px;
  border-radius: 10px;
  font-size: 1em;
  cursor: pointer;
  transition: all 0.3s ease;
  font-weight: 500;
}
.restart-btn:hover {
  background: #218838;
  transform: translateY(-1px);
}
.progress-bar {
  width: 100%;
  height: 8px;
  background: #e9ecef;
  border-radius: 4px;
  margin-bottom: 30px;
  overflow: hidden;
}
.progress-fill {
  height: 100%;
  background: linear-gradient(90deg, #667eea, #764ba2);
  border-radius: 4px;
  transition: width 0.5s ease;
}
@media (max-width: 768px) {
  .decision-container {
    padding: 18px;
    margin: 10px;
  }
  h1 {
    font-size: 1.3em;
  }
  .question {
    font-size: 1em;
  }
}
</style>
</head>
<body>
<div class="decision-container">
  <h1>Hierarchical Recommendation Tree</h1>
  <div class="progress-bar" id="progressBarContainer" style="display: block;">
    <div class="progress-fill" id="progressFill"></div>
  </div>
  <div id="questionContainer">
    <div class="question" id="questionText"></div>
    <div class="options" id="optionsContainer"></div>
  </div>
  <div id="resultContainer" style="display: none;">
    <div class="result" id="resultText"></div>
    <div id="secondaryContainer"></div>
    <div class="path-display">
      <div class="path-title">Your Decision Path:</div>
      <div class="path-steps" id="pathSteps"></div>
    </div>
    <button class="restart-btn" onclick="restart()">ðŸ”„ Start Over</button>
  </div>
</div>
<script>
// --- Decision Tree Data Structure ---
const decisionTree = {
  start: {
    question: "What type of product are you interested in?",
    options: {
      electronics: {
        text: "ðŸ“± Electronics",
        next: "electronics_type"
      },
      clothing: {
        text: "ðŸ‘— Clothing",
        next: "clothing_type"
      },
      books: {
        text: "ðŸ“š Books",
        next: "books_type"
      }
    }
  },
  electronics_type: {
    question: "Which category best fits your need?",
    options: {
      phone: {
        text: "Smartphone",
        next: "phone_budget"
      },
      laptop: {
        text: "Laptop",
        next: "laptop_budget"
      },
      tv: {
        text: "Television",
        next: "tv_budget"
      }
    }
  },
  phone_budget: {
    question: "What's your budget for a smartphone?",
    options: {
      low: {
        text: "Under $300",
        next: "result_phone_low"
      },
      mid: {
        text: "$300 - $700",
        next: "result_phone_mid"
      },
      high: {
        text: "Above $700",
        next: "result_phone_high"
      }
    }
  },
  laptop_budget: {
    question: "What's your budget for a laptop?",
    options: {
      low: {
        text: "Under $500",
        next: "result_laptop_low"
      },
      mid: {
        text: "$500 - $1200",
        next: "result_laptop_mid"
      },
      high: {
        text: "Above $1200",
        next: "result_laptop_high"
      }
    }
  },
  tv_budget: {
    question: "Preferred TV size?",
    options: {
      small: {
        text: "32-43 inches",
        next: "result_tv_small"
      },
      medium: {
        text: "50-65 inches",
        next: "result_tv_medium"
      },
      large: {
        text: "Above 65 inches",
        next: "result_tv_large"
      }
    }
  },
  clothing_type: {
    question: "What kind of clothing?",
    options: {
      casual: {
        text: "Casual Wear",
        next: "result_clothing_casual"
      },
      formal: {
        text: "Formal Wear",
        next: "result_clothing_formal"
      },
      sports: {
        text: "Sportswear",
        next: "result_clothing_sports"
      }
    }
  },
  books_type: {
    question: "What genre do you prefer?",
    options: {
      fiction: {
        text: "Fiction",
        next: "result_books_fiction"
      },
      nonfiction: {
        text: "Non-Fiction",
        next: "result_books_nonfiction"
      },
      comics: {
        text: "Comics/Graphic Novels",
        next: "result_books_comics"
      }
    }
  }
};

// --- Recommendations ---
const recommendations = {
  result_phone_low: {
    primary: {
      title: "Recommended: Budget Smartphone",
      description: "Try the Moto G Power or Samsung Galaxy A14 for reliable performance at a low price."
    },
    secondary: [
      { title: "Alternative:", description: "Consider the Nokia G21 or TCL 30 SE for similar value." }
    ]
  },
  result_phone_mid: {
    primary: {
      title: "Recommended: Mid-Range Smartphone",
      description: "Check out the Google Pixel 7a or Samsung Galaxy A54 for great features and camera quality."
    },
    secondary: [
      { title: "Alternative:", description: "OnePlus Nord CE 3 Lite or Xiaomi Redmi Note 12 Pro are also excellent choices." }
    ]
  },
  result_phone_high: {
    primary: {
      title: "Recommended: Premium Smartphone",
      description: "Go for the iPhone 15 or Samsung Galaxy S23 for top performance and features."
    },
    secondary: [
      { title: "Alternative:", description: "Consider the Google Pixel 8 Pro or OnePlus 11 for flagship experience." }
    ]
  },
  result_laptop_low: {
    primary: {
      title: "Recommended: Budget Laptop",
      description: "Acer Aspire 5 or Lenovo IdeaPad 3 offer solid performance for everyday tasks."
    },
    secondary: [
      { title: "Alternative:", description: "HP 14 or ASUS VivoBook 15 are also good options." }
    ]
  },
  result_laptop_mid: {
    primary: {
      title: "Recommended: Mid-Range Laptop",
      description: "Dell Inspiron 14 or ASUS ZenBook 14 provide a balance of power and portability."
    },
    secondary: [
      { title: "Alternative:", description: "Consider the Lenovo Yoga Slim 7 or HP Pavilion x360." }
    ]
  },
  result_laptop_high: {
    primary: {
      title: "Recommended: Premium Laptop",
      description: "Apple MacBook Air M2 or Dell XPS 13 are top picks for performance and design."
    },
    secondary: [
      { title: "Alternative:", description: "Try the ASUS ROG Zephyrus G14 for gaming or Microsoft Surface Laptop 5 for productivity." }
    ]
  },
  result_tv_small: {
    primary: {
      title: "Recommended: Small TV",
      description: "Samsung QLED Q60B (43\") or TCL 4-Series (43\") are great for compact spaces."
    },
    secondary: [
      { title: "Alternative:", description: "LG UHD AI ThinQ (43\") or Hisense A6 Series (40\")." }
    ]
  },
  result_tv_medium: {
    primary: {
      title: "Recommended: Medium TV",
      description: "Sony Bravia X80K (55\") or Samsung QLED Q70A (55\") offer excellent picture quality."
    },
    secondary: [
      { title: "Alternative:", description: "TCL 6-Series (55\") or LG OLED A2 (55\")." }
    ]
  },
  result_tv_large: {
    primary: {
      title: "Recommended: Large TV",
      description: "LG OLED C2 (77\") or Samsung QN90B Neo QLED (75\") for immersive viewing."
    },
    secondary: [
      { title: "Alternative:", description: "Sony Bravia XR X95K (85\") or TCL XL Collection (85\")." }
    ]
  },
  result_clothing_casual: {
    primary: {
      title: "Recommended: Casual Wear",
      description: "Try Uniqlo, H&M, or Gap for comfortable and stylish everyday outfits."
    },
    secondary: [
      { title: "Alternative:", description: "Consider Old Navy or Zara for more variety." }
    ]
  },
  result_clothing_formal: {
    primary: {
      title: "Recommended: Formal Wear",
      description: "Check out Marks & Spencer or Brooks Brothers for quality suits and dresses."
    },
    secondary: [
      { title: "Alternative:", description: "Banana Republic and Mango also offer elegant options." }
    ]
  },
  result_clothing_sports: {
    primary: {
      title: "Recommended: Sportswear",
      description: "Nike, Adidas, and Under Armour provide durable and comfortable sports clothing."
    },
    secondary: [
      { title: "Alternative:", description: "Puma and Decathlon are also great for activewear." }
    ]
  },
  result_books_fiction: {
    primary: {
      title: "Recommended: Fiction",
      description: "Explore bestsellers from authors like Colleen Hoover, Stephen King, or Haruki Murakami."
    },
    secondary: [
      { title: "Alternative:", description: "Try classics from Jane Austen or George Orwell." }
    ]
  },
  result_books_nonfiction: {
    primary: {
      title: "Recommended: Non-Fiction",
      description: "Consider 'Atomic Habits' by James Clear or 'Educated' by Tara Westover."
    },
    secondary: [
      { title: "Alternative:", description: "'Sapiens' by Yuval Noah Harari or 'Becoming' by Michelle Obama." }
    ]
  },
  result_books_comics: {
    primary: {
      title: "Recommended: Comics/Graphic Novels",
      description: "Marvel and DC graphic novels, or try 'Maus' by Art Spiegelman and 'Persepolis' by Marjane Satrapi."
    },
    secondary: [
      { title: "Alternative:", description: "'Watchmen' by Alan Moore or 'Saga' by Brian K. Vaughan." }
    ]
  }
};

// --- Logic ---
let currentNode = 'start';
let userPath = [];
let totalSteps = 0;

function calculateTotalSteps() {
  // Find the maximum depth of the tree
  let maxDepth = 0;
  function findDepth(node, depth = 0) {
    if (node.startsWith('result_')) {
      maxDepth = Math.max(maxDepth, depth);
      return;
    }
    const nodeData = decisionTree[node];
    if (nodeData && nodeData.options) {
      for (let option in nodeData.options) {
        findDepth(nodeData.options[option].next, depth + 1);
      }
    }
  }
  findDepth('start');
  return maxDepth;
}

function updateProgress() {
  const progress = (userPath.length / totalSteps) * 100;
  document.getElementById('progressFill').style.width = progress + '%';
}

function makeChoice(choice) {
  const currentNodeData = decisionTree[currentNode];
  const selectedOption = currentNodeData.options[choice];
  userPath.push(selectedOption.text);
  currentNode = selectedOption.next;
  updateProgress();
  if (currentNode.startsWith('result_')) {
    showResult();
  } else {
    showQuestion();
  }
}

function showQuestion() {
  const nodeData = decisionTree[currentNode];
  document.getElementById('resultContainer').style.display = 'none';
  document.getElementById('questionContainer').style.display = 'block';
  document.getElementById('questionText').textContent = nodeData.question;
  const optionsContainer = document.getElementById('optionsContainer');
  optionsContainer.innerHTML = '';
  optionsContainer.className = 'options';
  const keys = Object.keys(nodeData.options);
  if (keys.length <= 3) {
    optionsContainer.classList.add('horizontal');
  }
  for (let optionKey of keys) {
    const option = nodeData.options[optionKey];
    const button = document.createElement('button');
    button.className = 'option-btn';
    button.textContent = option.text;
    button.onclick = () => makeChoice(optionKey);
    optionsContainer.appendChild(button);
  }
}

function showResult() {
  document.getElementById('questionContainer').style.display = 'none';
  document.getElementById('resultContainer').style.display = 'block';
  const rec = recommendations[currentNode];
  document.getElementById('resultText').innerHTML =
    `<strong>${rec.primary.title}</strong><br><br>${rec.primary.description}`;
  // Secondary options
  const secondaryDiv = document.getElementById('secondaryContainer');
  secondaryDiv.innerHTML = '';
  rec.secondary.forEach(sec => {
    const secDiv = document.createElement('div');
    secDiv.className = 'secondary';
    secDiv.innerHTML = `<strong>${sec.title}</strong> ${sec.description}`;
    secondaryDiv.appendChild(secDiv);
  });
  document.getElementById('pathSteps').textContent = userPath.join(' â†’ ');
  document.getElementById('progressFill').style.width = '100%';
}

function restart() {
  currentNode = 'start';
  userPath = [];
  document.getElementById('resultContainer').style.display = 'none';
  document.getElementById('progressFill').style.width = '0%';
  showQuestion();
}

// Initialize
totalSteps = calculateTotalSteps();
showQuestion();
</script>
</body>
</html>
