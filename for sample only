<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Procurement Decision Tree</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    body {
      font-family: 'Segoe UI', Arial, sans-serif;
      background: #f4f8fb;
      margin: 0;
      padding: 0;
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .container {
      background: #fff;
      border-radius: 18px;
      box-shadow: 0 8px 32px rgba(0,0,0,0.12);
      padding: 36px 28px;
      max-width: 480px;
      width: 100%;
      margin: 24px;
    }
    h1 {
      font-size: 1.6em;
      margin-bottom: 18px;
      color: #1e3888;
      font-weight: 700;
    }
    .question {
      font-size: 1.15em;
      margin-bottom: 22px;
      color: #333;
    }
    .options {
      display: flex;
      flex-direction: column;
      gap: 14px;
      margin-bottom: 18px;
    }
    .option-btn {
      background: linear-gradient(90deg, #1e3888, #3a6ea5);
      color: #fff;
      border: none;
      border-radius: 10px;
      padding: 14px 0;
      font-size: 1em;
      cursor: pointer;
      transition: background 0.2s;
      font-weight: 500;
    }
    .option-btn:hover {
      background: linear-gradient(90deg, #3a6ea5, #1e3888);
    }
    .recommendation {
      background: #f0f4fa;
      border-radius: 10px;
      padding: 18px 16px;
      margin-bottom: 18px;
      border-left: 5px solid #1e3888;
    }
    .primary {
      font-weight: bold;
      color: #1e3888;
      font-size: 1.12em;
      margin-bottom: 8px;
    }
    .secondary {
      color: #444;
      margin-left: 16px;
      margin-bottom: 4px;
    }
    .restart-btn {
      background: #28a745;
      color: #fff;
      border: none;
      border-radius: 8px;
      padding: 10px 22px;
      font-size: 1em;
      cursor: pointer;
      font-weight: 500;
      margin-top: 10px;
    }
    .restart-btn:hover {
      background: #218838;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Procurement Decision Tree</h1>
    <div id="treeArea">
      <!-- Dynamic content goes here -->
    </div>
  </div>
  <script>
    // Sample decision tree structure
    const decisionTree = {
      start: {
        question: "What are you procuring?",
        options: [
          { text: "Goods", next: "goods" },
          { text: "Infrastructure Projects", next: "infra" },
          { text: "Consulting Services", next: "consulting" }
        ]
      },
      goods: {
        question: "Is the value above â‚±2,000,000?",
        options: [
          { text: "Yes", next: "goods_high" },
          { text: "No", next: "goods_low" }
        ]
      },
      goods_high: {
        recommendation: {
          primary: "Competitive Bidding",
          secondary: [
            "Alternative: Limited Source Bidding",
            "Alternative: Negotiated Procurement (in special cases)"
          ]
        }
      },
      goods_low: {
        recommendation: {
          primary: "Small Value Procurement",
          secondary: [
            "Alternative: Shopping",
            "Alternative: Direct Contracting"
          ]
        }
      },
      infra: {
        recommendation: {
          primary: "Competitive Bidding (Infrastructure)",
          secondary: [
            "Alternative: Negotiated Procurement (Emergency Cases)",
            "Alternative: Design and Build"
          ]
        }
      },
      consulting: {
        recommendation: {
          primary: "Quality-Based Selection (QBS)",
          secondary: [
            "Alternative: Least-Cost Selection",
            "Alternative: Negotiated Procurement"
          ]
        }
      }
    };

    // Render logic
    function renderNode(nodeKey) {
      const area = document.getElementById('treeArea');
      area.innerHTML = '';
      const node = decisionTree[nodeKey];

      // If node has a question, show question and options
      if (node.question) {
        const q = document.createElement('div');
        q.className = 'question';
        q.textContent = node.question;
        area.appendChild(q);

        const opts = document.createElement('div');
        opts.className = 'options';
        node.options.forEach((opt, idx) => {
          const btn = document.createElement('button');
          btn.className = 'option-btn';
          btn.textContent = opt.text;
          btn.onclick = () => renderNode(opt.next);
          opts.appendChild(btn);
        });
        area.appendChild(opts);
      }
      // If node has a recommendation, show it
      else if (node.recommendation) {
        const rec = node.recommendation;
        const recDiv = document.createElement('div');
        recDiv.className = 'recommendation';

        const primary = document.createElement('div');
        primary.className = 'primary';
        primary.textContent = `Primary: ${rec.primary}`;
        recDiv.appendChild(primary);

        rec.secondary.forEach(sec => {
          const secDiv = document.createElement('div');
          secDiv.className = 'secondary';
          secDiv.textContent = sec;
          recDiv.appendChild(secDiv);
        });

        area.appendChild(recDiv);

        const restartBtn = document.createElement('button');
        restartBtn.className = 'restart-btn';
        restartBtn.textContent = 'ðŸ”„ Start Over';
        restartBtn.onclick = () => renderNode('start');
        area.appendChild(restartBtn);
      }
    }

    // Initialize
    renderNode('start');
  </script>
</body>
</html>
