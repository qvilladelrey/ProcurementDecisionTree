<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive Decision Tree</title>
    <style>
        body {
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background-image: url('Goods, Infra, Consulting (1).png');
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            background-attachment: fixed;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .decision-container {
            background: white;
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 35px 65px rgba(0.25,0.25,0.25,0.25);
            max-width: 600px;
            width: 100%;
            text-align: center;
            position: relative;
            overflow: hidden;
        }

        h1 {
            font-family: 'Bricolage Grotesque', 'Arial', sans-serif;
            color: #333;
            margin-bottom: 30px;
            font-size: 2.5em;
            font-weight: 600;
        }

        .question {
            font-size: 2em;
            color: #555;
            margin-bottom: 30px;
            line-height: 1.5;
        }

        .options {
            display: flex;
            flex-direction: column;
            gap: 15px;
            margin-bottom: 30px;
        }

        .option-btn {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 18px 25px;
            border-radius: 12px;
            font-size: 1.1em;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 500;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
        }

        .option-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
        }

        .option-btn:active {
            transform: translateY(0);
        }

        .result {
            background: linear-gradient(135deg, #4facfe, #00f2fe);
            color: white;
            padding: 25px;
            border-radius: 15px;
            font-size: 1.2em;
            margin-bottom: 20px;
            box-shadow: 0 8px 20px rgba(79, 172, 254, 0.3);
        }

        .path-display {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 12px;
            margin-bottom: 20px;
            border-left: 4px solid #667eea;
        }

        .path-title {
            font-weight: 600;
            color: #333;
            margin-bottom: 10px;
        }

        .path-steps {
            color: #666;
            font-size: 0.95em;
            line-height: 1.6;
        }

        .restart-btn {
            background: #28a745;
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 10px;
            font-size: 1em;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 500;
        }

        .restart-btn:hover {
            background: #218838;
            transform: translateY(-1px);
        }

        .progress-bar {
            width: 100%;
            height: 8px;
            background: #e9ecef;
            border-radius: 4px;
            margin-bottom: 30px;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #667eea, #764ba2);
            border-radius: 4px;
            transition: width 0.5s ease;
        }

        @media (max-width: 768px) {
            .decision-container {
                padding: 25px;
                margin: 10px;
            }
            
            h1 {
                font-size: 1.8em;
            }
            
            .question {
                font-size: 1.1em;
            }
        }
    </style>
</head>
<body>
    <div class="decision-container">
        <h1>Decision Tree for Modes of Procurement</h1>

        <div class="progress-bar" id="progressBarContainer" style="display: none;">
            <div class="progress-fill" id="progressFill"></div>
        </div>
        
        <div id="homeContainer">
            <div class="question" style="font-size: 1.1em; text-align: justified; margin-bottom: 30px;">
                This decision tree for modes of procurement is a step-by-step guide that uses yes/no or conditional questions to determine the most appropriate procurement method based on thresholds, conditions, and justifications. It ensures Procuring Entities choose which mode of procurement is the most fit for their desired purpose, in accordance with the Fit-for-Purpose Approach under Republic Act No. 12009 or the New Government Procurement Act.
            </div>
            
            <div class="options">
                <img src="START.png" onclick="startDecisionTree()" style="width: 280px; height: 90px; object-fit: cover; border-radius: 15px; cursor: pointer; transition: all 0.3s ease; box-shadow: 0 4px 15px rgba(0,0,0,0.2); display: block; margin: 0 auto;" alt="Start icon" onmouseover="this.style.transform='scale(1.05)'" onmouseout="this.style.transform='scale(1)'" onmousedown="this.style.transform='scale(0.95)'" onmouseup="this.style.transform='scale(1.05)'" onerror="this.src=''; this.alt='Image failed to load'; this.style.display='none';">
            </div>
        </div>

        <div id="questionContainer" style="display: none;">
            <div class="question" id="questionText">
                What are you procuring?
            </div>
            
            <div class="options" id="optionsContainer">
                <div class="image-option" onclick="makeChoice('goods')">
                    <img src="Billy Goods.png" style="width: 290px; height: 260px; object-fit: cover; border-radius: 8px;" alt="Goods icon" onerror="this.src=''; this.alt='Image failed to load'; this.style.display='none';">
                    <h3>Goods</h3>
                </div>
                <div class="image-option" onclick="makeChoice('infrastructure')">
                    <img src="Billy Infra.png" style="width: 290px; height: 260px; object-fit: cover; border-radius: 8px;" alt="Infrastructure icon" onerror="this.src=''; this.alt='Image failed to load'; this.style.display='none';">
                    <h3>Infrastructure Projects</h3>
                </div>
                <div class="image-option" onclick="makeChoice('consulting')">
                    <img src="Billy Consulting.png" style="width: 290px; height: 260px; object-fit: cover; border-radius: 8px;" alt="Consulting icon" onerror="this.src=''; this.alt='Image failed to load'; this.style.display='none';">
                    <h3>Consulting Services</h3>
                </div>
            </div>
        </div>
        
        <div id="resultContainer" style="display: none;">
            <div class="result" id="resultText"></div>
            <div class="path-display">
                <div class="path-title">Your Decision Path:</div>
                <div class="path-steps" id="pathSteps"></div>
            </div>
            <button class="restart-btn" onclick="restart()">
                üîÑ Start Over
            </button>
        </div>
    </div>

    <script>
        const decisionTree = {
            start: {
                question: "What are you procuring?",
                options: {
                    goods: {
                        text: "üì¶ Goods",
                        next: "goods_previously"
                    },
                    infrastructure: {
                        text: "üèóÔ∏è Infrastructure Projects",
                        next: "result_under_construction"
                    },
                    consulting: {
                        text: "ü§ù Consulting Services",
                        next: "result_under_construction"
                    }
                }
            },
            goods_previously: {
                question: "Was the Good procured previously?",
                options: {
                    yes: {
                        text: "‚úÖ Yes",
                        next: "need_to_action"
                    },
                    no: {
                        text: "‚ùå No",
                        next: "result_under_construction"
                    }
                }
            },
            need_to_action: {
                question: "Is there a need to:",
                options: {
                    immediate: {
                        text: "üö® Undertake immediate action to prevent damage to or loss of life or property or restore vital public services",
                        next: "result_immediate_action"
                    },
                    failed_bidding: {
                        text: "üîÑ Procure again due to two (2) failures of bidding",
                        next: "result_failed_bidding"
                    },
                    replenish: {
                        text: "üìã Replenish Goods procured under zzz",
                        next: "result_replenish"
                    },
                    other: {
                        text: "‚ùì Not among the stated options",
                        next: "result_other_options"
                    }
                }
            }
        };

        const results = {
            result_immediate_action: {
                title: "üö® Emergency Procurement",
                description: "This situation qualifies for emergency procurement procedures. You may proceed with direct contracting or negotiated procurement to address the immediate threat to life, property, or vital public services. Ensure proper documentation of the emergency circumstances and follow up with standard procurement procedures when the emergency has passed.",
                path: []
            },
            result_failed_bidding: {
                title: "üîÑ Failed Bidding Procurement",
                description: "After two failed bidding attempts, you may proceed with alternative procurement methods such as negotiated procurement or direct contracting. Review the reasons for previous failures and adjust specifications, terms, or market approach as needed to ensure successful procurement.",
                path: []
            },
            result_replenish: {
                title: "üìã Replenishment Procurement",
                description: "For goods procured under existing agreements (zzz), you may use simplified replenishment procedures. Verify that the original contract terms allow for replenishment, check remaining quantities and budget allocations, and follow the established replenishment process.",
                path: []
            },
            result_other_options: {
                title: "‚ùì Alternative Procurement Path",
                description: "Your situation doesn't fall under the standard exceptions. You will need to follow regular competitive bidding procedures unless other specific exemptions apply. Consider reviewing procurement regulations for additional applicable exceptions or consult with your procurement office for guidance.",
                path: []
            },
            result_under_construction: {
                title: "üöß Under Construction",
                description: "This section is currently under development. Please check back later for guidance on this procurement type, or contact your procurement office for immediate assistance with your specific requirements.",
                path: []
            }
        };

        let currentNode = 'start';
        let userPath = [];
        let totalSteps = 0;

        function calculateTotalSteps() {
            // Calculate the maximum depth of the decision tree
            let maxDepth = 0;
            
            function findDepth(node, depth = 0) {
                if (node.startsWith('result_')) {
                    maxDepth = Math.max(maxDepth, depth);
                    return;
                }
                
                const nodeData = decisionTree[node];
                if (nodeData && nodeData.options) {
                    for (let option in nodeData.options) {
                        findDepth(nodeData.options[option].next, depth + 1);
                    }
                }
            }
            
            findDepth('start');
            return maxDepth;
        }

        function updateProgress() {
            const progress = (userPath.length / totalSteps) * 100;
            document.getElementById('progressFill').style.width = progress + '%';
        }

        function makeChoice(choice) {
            const currentNodeData = decisionTree[currentNode];
            const selectedOption = currentNodeData.options[choice];
            
            userPath.push(selectedOption.text);
            currentNode = selectedOption.next;
            
            updateProgress();
            
            if (currentNode.startsWith('result_')) {
                showResult();
            } else {
                showQuestion();
            }
        }

        function showQuestion() {
            const nodeData = decisionTree[currentNode];
            document.getElementById('questionText').textContent = nodeData.question;
            
            const optionsContainer = document.getElementById('optionsContainer');
            
            // Only replace with image options for the first question
            if (currentNode === 'start') {
                optionsContainer.innerHTML = `
                    <div class="image-option" onclick="makeChoice('goods')">
                        <img src="Billy Goods.png" style="width: 290px; height: 260px; object-fit: cover; border-radius: 8px;" alt="Goods icon" onerror="this.src=''; this.alt='Image failed to load'; this.style.display='none';">
                        <h3>Goods</h3>
                    </div>
                    <div class="image-option" onclick="makeChoice('infrastructure')">
                        <img src="Billy Infra.png" style="width: 290px; height: 260px; object-fit: cover; border-radius: 8px;" alt="Infrastructure icon" onerror="this.src=''; this.alt='Image failed to load'; this.style.display='none';">
                        <h3>Infrastructure Projects</h3>
                    </div>
                    <div class="image-option" onclick="makeChoice('consulting')">
                        <img src="Billy Consulting.png" style="width: 290px; height: 260px; object-fit: cover; border-radius: 8px;" alt="Consulting icon" onerror="this.src=''; this.alt='Image failed to load'; this.style.display='none';">
                        <h3>Consulting Services</h3>
                    </div>
                `;
            } else {
                // Use regular buttons for other questions
                optionsContainer.innerHTML = '';
                
                for (let optionKey in nodeData.options) {
                    const option = nodeData.options[optionKey];
                    const button = document.createElement('button');
                    button.className = 'option-btn';
                    button.textContent = option.text;
                    button.onclick = () => makeChoice(optionKey);
                    optionsContainer.appendChild(button);
                }
            }
        }

        function showResult() {
            const result = results[currentNode];
            result.path = [...userPath];
            
            document.getElementById('questionContainer').style.display = 'none';
            document.getElementById('resultContainer').style.display = 'block';
            
            document.getElementById('resultText').innerHTML = `
                <strong>${result.title}</strong><br><br>
                ${result.description}
            `;
            
            document.getElementById('pathSteps').textContent = result.path.join(' ‚Üí ');
            
            // Complete the progress bar
            document.getElementById('progressFill').style.width = '100%';
        }

        function startDecisionTree() {
            document.getElementById('homeContainer').style.display = 'none';
            document.getElementById('questionContainer').style.display = 'block';
            showQuestion();
        }

        function restart() {
            currentNode = 'start';
            userPath = [];
            
            document.getElementById('homeContainer').style.display = 'block';
            document.getElementById('questionContainer').style.display = 'none';
            document.getElementById('resultContainer').style.display = 'none';
            document.getElementById('progressFill').style.width = '0%';
        }

        // Initialize
        totalSteps = calculateTotalSteps();
        showQuestion();
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'98fdc44645733e44',t:'MTc2MDY4MjgzMC4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
